{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from \"@/utility/request\";\nconst kind_Options = ['笔记本电脑', '台式电脑', '平板电脑', '手机通信', '智能产品', '配件办公'];\nexport default {\n  // 组件创建时加载本地的购物车数据\n  created() {\n    const cartData = localStorage.getItem('cart');\n    if (cartData) {\n      // 数据格式转换\n      this.cart = JSON.parse(cartData);\n    }\n    //添加商品列表信息到表单\n    request.post(\"http://localhost:8080/product/selectInfoByKind\", []).then(result => {\n      // result.data = Result类对象，其data字段为Product类对象列表\n      this.product_List = result.data;\n      this.handlePageChange(1);\n    });\n  },\n  beforeDestroy() {\n    // 更新本地数据\n    localStorage.setItem('cart', JSON.stringify(this.cart));\n  },\n  data() {\n    return {\n      baseImageUrl: 'http://localhost:8080/images/download/',\n      // 展示的原始商品列表\n      product_List: [],\n      // 选择的商品种类\n      checkKinds: [],\n      // 总共的商品种类\n      kinds: kind_Options,\n      // 购物车存放的商品信息\n      cart: [],\n      //所有页数显示项目的总数量\n      pageTotal: 100,\n      // 当前页码\n      currentPage: 1,\n      // 每页显示的项目数量\n      itemsPerPage: 8,\n      // 当前页的项目数组\n      currentPageItems: []\n    };\n  },\n  computed: {},\n  methods: {\n    handleCheckedKindsChange() {\n      let kindList = this.checkKinds;\n      if (kindList.length === kind_Options.length) {\n        // 如果选择的种类数组为全满，咋直接发送空数组表示不进行商品种类筛选\n        kindList = [];\n      }\n      // 根据商品种类更新后端筛选后的商品列表\n      request.post(\"http://localhost:8080/product/selectInfoByKind\", kindList).then(result => {\n        // result.data = Result类对象，其data字段为Product类对象列表\n        this.product_List = result.data;\n        this.currentPageItems = this.getPaginatedItems(this.currentPage);\n      });\n    },\n    handlePageChange(newPage) {\n      this.currentPage = newPage;\n      this.currentPageItems = this.getPaginatedItems(newPage);\n    },\n    getPaginatedItems(page) {\n      const start = (page - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.product_List.slice(start, end);\n    },\n    // 添加商品至购物车\n    addToCart(product) {\n      const existingProduct = this.cart.find(item => item.id === product.id);\n      if (existingProduct) {\n        existingProduct.quantity++;\n      } else {\n        this.cart.push({\n          productID: product.id,\n          name: product.name,\n          kind: product.kind,\n          price: product.price,\n          quantity: 1,\n          selected: false\n        });\n      }\n      this.$notify.success(\"已添加至购物车\");\n    }\n  }\n};","map":{"version":3,"names":["request","kind_Options","created","cartData","localStorage","getItem","cart","JSON","parse","post","then","result","product_List","data","handlePageChange","beforeDestroy","setItem","stringify","baseImageUrl","checkKinds","kinds","pageTotal","currentPage","itemsPerPage","currentPageItems","computed","methods","handleCheckedKindsChange","kindList","length","getPaginatedItems","newPage","page","start","end","slice","addToCart","product","existingProduct","find","item","id","quantity","push","productID","name","kind","price","selected","$notify","success"],"sources":["src/views/shopping/searchView.vue"],"sourcesContent":["<template>\r\n  <div class=\"main\">\r\n    <el-container>\r\n      <el-header>\r\n        <el-checkbox-group v-model=\"checkKinds\" :min=\"0\" :max=\"6\" @change=\"handleCheckedKindsChange\">\r\n          <el-checkbox-button v-for=\"kind in kinds\" :label=\"kind\" :key=\"kind\">\r\n            {{ kind }}\r\n          </el-checkbox-button>\r\n        </el-checkbox-group>\r\n      </el-header>\r\n      <el-main class=\"productDetail\">\r\n        <ul>\r\n          <li v-for=\"v in currentPageItems\" v-bind:key=\"v.id\">\r\n            <el-image :src=(baseImageUrl+v.imageUrl) alt=\"\" class=\"img_Product\"></el-image>\r\n            <h4>{{ v.name }}</h4>\r\n            <p>{{ \"￥\" + v.price }}</p>\r\n            <el-button @click=\"addToCart(v)\" type=\"danger\">加入购物车</el-button>\r\n          </li>\r\n        </ul>\r\n      </el-main>\r\n      <el-pagination style=\"text-align: center;height: 50px\"\r\n                     background\r\n                     layout=\"prev, pager, next,jumper\"\r\n                     :total=this.product_List.length\r\n                     :current-page=\"currentPage\"\r\n                     :page-size=\"itemsPerPage\"\r\n                     @current-change=\"handlePageChange\">\r\n      </el-pagination>\r\n    </el-container>\r\n  </div>\r\n</template>\r\n<script>\r\nimport request from \"@/utility/request\";\r\n\r\nconst kind_Options = ['笔记本电脑', '台式电脑', '平板电脑', '手机通信', '智能产品', '配件办公']\r\nexport default {\r\n  // 组件创建时加载本地的购物车数据\r\n  created() {\r\n    const cartData = localStorage.getItem('cart')\r\n    if (cartData) {\r\n      // 数据格式转换\r\n      this.cart = JSON.parse(cartData)\r\n    }\r\n    //添加商品列表信息到表单\r\n    request.post(\"http://localhost:8080/product/selectInfoByKind\", [])\r\n        .then(result => {\r\n          // result.data = Result类对象，其data字段为Product类对象列表\r\n          this.product_List = result.data\r\n          this.handlePageChange(1)\r\n        })\r\n  },\r\n  beforeDestroy() {\r\n    // 更新本地数据\r\n    localStorage.setItem('cart', JSON.stringify(this.cart))\r\n  },\r\n  data() {\r\n    return {\r\n      baseImageUrl: 'http://localhost:8080/images/download/',\r\n      // 展示的原始商品列表\r\n      product_List: [],\r\n      // 选择的商品种类\r\n      checkKinds: [],\r\n      // 总共的商品种类\r\n      kinds: kind_Options,\r\n      // 购物车存放的商品信息\r\n      cart: [],\r\n      //所有页数显示项目的总数量\r\n      pageTotal: 100,\r\n      // 当前页码\r\n      currentPage: 1,\r\n      // 每页显示的项目数量\r\n      itemsPerPage: 8,\r\n      // 当前页的项目数组\r\n      currentPageItems: []\r\n    }\r\n  },\r\n  computed: {},\r\n  methods: {\r\n    handleCheckedKindsChange() {\r\n      let kindList = this.checkKinds\r\n      if (kindList.length === kind_Options.length) {\r\n        // 如果选择的种类数组为全满，咋直接发送空数组表示不进行商品种类筛选\r\n        kindList = []\r\n      }\r\n      // 根据商品种类更新后端筛选后的商品列表\r\n      request.post(\"http://localhost:8080/product/selectInfoByKind\", kindList)\r\n          .then(result => {\r\n            // result.data = Result类对象，其data字段为Product类对象列表\r\n            this.product_List = result.data\r\n            this.currentPageItems = this.getPaginatedItems(this.currentPage);\r\n          })\r\n    },\r\n    handlePageChange(newPage) {\r\n      this.currentPage = newPage;\r\n      this.currentPageItems = this.getPaginatedItems(newPage);\r\n    },\r\n    getPaginatedItems(page) {\r\n      const start = (page - 1) * this.itemsPerPage;\r\n      const end = start + this.itemsPerPage;\r\n      return this.product_List.slice(start, end);\r\n    },\r\n    // 添加商品至购物车\r\n    addToCart(product) {\r\n      const existingProduct = this.cart.find(item => item.id === product.id);\r\n      if (existingProduct) {\r\n        existingProduct.quantity++;\r\n      } else {\r\n        this.cart.push({\r\n          productID: product.id,\r\n          name: product.name,\r\n          kind: product.kind,\r\n          price: product.price,\r\n          quantity: 1,\r\n          selected: false\r\n        });\r\n      }\r\n      this.$notify.success(\"已添加至购物车\")\r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n<style scoped>\r\n\r\n.main {\r\n  display: flex;\r\n  background-color: #f5f5f5;\r\n}\r\n\r\nul li {\r\n  display: block; /* 将ul的行内元素转换为块元素 */\r\n  float: left; /* 增加了左浮动属性*/\r\n  width: 290px;\r\n  height: 385px;\r\n  background-color: #fff;\r\n  margin-right: 2%;\r\n  margin-bottom: 2%;\r\n  vertical-align: top;\r\n  padding: 10px 10px 10px 10px;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.img_Product {\r\n  width: 160px;\r\n  height: 160px;\r\n  display: block;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  overflow: hidden;\r\n  border-bottom: 1px solid #ebebeb;\r\n  padding-bottom: 25px;\r\n  margin: 15px auto 0;\r\n  position: relative;\r\n}\r\n\r\n</style>"],"mappings":";AAgCA,OAAAA,OAAA;AAEA,MAAAC,YAAA;AACA;EACA;EACAC,QAAA;IACA,MAAAC,QAAA,GAAAC,YAAA,CAAAC,OAAA;IACA,IAAAF,QAAA;MACA;MACA,KAAAG,IAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAL,QAAA;IACA;IACA;IACAH,OAAA,CAAAS,IAAA,uDACAC,IAAA,CAAAC,MAAA;MACA;MACA,KAAAC,YAAA,GAAAD,MAAA,CAAAE,IAAA;MACA,KAAAC,gBAAA;IACA;EACA;EACAC,cAAA;IACA;IACAX,YAAA,CAAAY,OAAA,SAAAT,IAAA,CAAAU,SAAA,MAAAX,IAAA;EACA;EACAO,KAAA;IACA;MACAK,YAAA;MACA;MACAN,YAAA;MACA;MACAO,UAAA;MACA;MACAC,KAAA,EAAAnB,YAAA;MACA;MACAK,IAAA;MACA;MACAe,SAAA;MACA;MACAC,WAAA;MACA;MACAC,YAAA;MACA;MACAC,gBAAA;IACA;EACA;EACAC,QAAA;EACAC,OAAA;IACAC,yBAAA;MACA,IAAAC,QAAA,QAAAT,UAAA;MACA,IAAAS,QAAA,CAAAC,MAAA,KAAA5B,YAAA,CAAA4B,MAAA;QACA;QACAD,QAAA;MACA;MACA;MACA5B,OAAA,CAAAS,IAAA,mDAAAmB,QAAA,EACAlB,IAAA,CAAAC,MAAA;QACA;QACA,KAAAC,YAAA,GAAAD,MAAA,CAAAE,IAAA;QACA,KAAAW,gBAAA,QAAAM,iBAAA,MAAAR,WAAA;MACA;IACA;IACAR,iBAAAiB,OAAA;MACA,KAAAT,WAAA,GAAAS,OAAA;MACA,KAAAP,gBAAA,QAAAM,iBAAA,CAAAC,OAAA;IACA;IACAD,kBAAAE,IAAA;MACA,MAAAC,KAAA,IAAAD,IAAA,aAAAT,YAAA;MACA,MAAAW,GAAA,GAAAD,KAAA,QAAAV,YAAA;MACA,YAAAX,YAAA,CAAAuB,KAAA,CAAAF,KAAA,EAAAC,GAAA;IACA;IACA;IACAE,UAAAC,OAAA;MACA,MAAAC,eAAA,QAAAhC,IAAA,CAAAiC,IAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAC,EAAA,KAAAJ,OAAA,CAAAI,EAAA;MACA,IAAAH,eAAA;QACAA,eAAA,CAAAI,QAAA;MACA;QACA,KAAApC,IAAA,CAAAqC,IAAA;UACAC,SAAA,EAAAP,OAAA,CAAAI,EAAA;UACAI,IAAA,EAAAR,OAAA,CAAAQ,IAAA;UACAC,IAAA,EAAAT,OAAA,CAAAS,IAAA;UACAC,KAAA,EAAAV,OAAA,CAAAU,KAAA;UACAL,QAAA;UACAM,QAAA;QACA;MACA;MACA,KAAAC,OAAA,CAAAC,OAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}